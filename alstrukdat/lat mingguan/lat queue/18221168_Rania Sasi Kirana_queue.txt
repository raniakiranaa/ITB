Rania Sasi Kirana
18221168
Latihan queue

SOAL 1 - CIRCULAR BUFFER

a. 
constant IDX_UNDEF: integer = -1
constant CAPACITY: integer = 100

type ElType: <id: integer, { nomor identifikasi pekerjaan }
            cost: integer> { waktu penyelesaian pekerjaan (time cost) }

type queue: <buffer: array [0..CAPACITY-1] of ElType, { penyimpanan elemen }
            idxHead: integer, { indeks elemen terdepan }
            count: integer > { banyak elemen dalam queue }

b.
function isFull (q: queue) → boolean
{mengirim true jika q penuh}
KAMUS LOKAL
ALGORITMA
    -> (q.count == CAPACITY)

c.
procedure enqueue (input/output q: queue, input val: ElType)
{Proses: menambahkan val pada q sebagai Tail baru}
{IS: q mungkin kosong, q tidak penuh}
{FS: val menjadi Tail baru dengan mekanisme circular buffer}
KAMUS LOKAL
ALGORITMA
    q.buffer[((q.idxHead + q.count-1) mod CAPACITY) + 1] <- val
    q.count <- q.count + 1

d.
procedure dequeue (input/output q: queue, output val: ElType)
{Proses: menyimpan nilai Head q ke val dan menghapus Head q}
{IS: q tidak kosong}
{FS: val adalah nilai elemen Head, Head “bergerak” dengan mekanisme 
circular buffer. q mungkin kosong}
KAMUS LOKAL
ALGORITMA
    val <- head(q)
    q.count <- q.count - 1
    if (q.count = 0) then  { q berelemen 1 }
        q.idxHead <- IDX_UNDEF
    else
        q.idxHead <- (q.idxHead mod CAPACITY) + 1


SOAL 2 - ROUND robin

procedure roundRobin (input/output q: queue, input t: integer)
{Proses: memproses elemen antrian q secara round robin}
{IS: q tidak kosong, t adalah waktu yang tersedia untuk memproses setiap elemen}
{FS: elemen e pada posisi HEAD dihapus dari q. 
Jika cost e ≤ t maka ditampilkan “<id> telah selesai diproses”. 
Jika cost e > t maka e disisipkan kembali sebagai tail q
dengan cost berkurang sebesar t }
KAMUS LOKAL
    e: ElType
ALGORITMA
    dequeue(q, e)
    if (e.cost <= t) then
        print(e.id, "telah selesai diproses")
    else
        e.cost <- e.cost - t
        enqueue(q, e)


SOAL 3 - PRIORITY QUEUE

a.
constant IDX_UNDEF: integer = -1
constant CAPACITY: integer = 100

type ElType: <id: integer, { nomor identifikasi pekerjaan }
            cost: integer> { waktu penyelesaian pekerjaan (time cost) }

type queue: <buffer: array [0..CAPACITY-1] of ElType, { penyimpanan elemen (elemen queue terurut membesar berdasar cost) }
            idxHead: integer, { indeks elemen terdepan }
            idxTail: integer > { indeks elemen terakhir }

b.
procedure enqueue (input/output q: queue, input val: ElType)
{Proses: menambahkan val sebagai elemen baru di q, dengan 
memperhatikan lamanya waktu pekerjaan tsb dapat 
diselesaikan, yaitu pekerjaan yang lebih cost diletakkan 
lebih akhir. Jika ada 2 pekerjaan yang cost waktunya sama, 
pekerjaan terakhir yang baru datang disisipkan lebih
belakang}
{IS: q mungkin kosong, q tidak penuh}
{FS: val menjadi elemen q yang baru dengan urutan waktu pekerjaan 
membesar}
KAMUS LOKAL
    i: integer
ALGORITMA
    if (isEmpty(q)) then { q kosong }
        q.idxHead <- 0
        q.idxTail <- 0
        q.buffer[q.idxTail] <- val
    else 
        { prekondisi q tidak penuh }
        if (q.idxTail = CAPACITY-1) then { q penuh semu maka digeser dulu ke kiri sampai indeks 0 }
            i traversal [q.idxHead..q.idxTail]
                q.buffer[i-q.idxHead] = q.buffer[i]
            q.idxTail <- q.idxTail - q.idxHead
            q.idxHead <- 0

        { pengecekan dari elemen paling kanan }
        if (q.buffer[q.idxTail].cost < val.cost) then
            q.idxTail <- q.idxTail + 1
            q.buffer[q.idxTail] <- val
        else
            i <- q.idxTail
            while (i>=q.idxHead and q.buffer[i].cost>val.cost) do
                q.buffer[i+1] <- q.buffer[i]
                i <- i-1
            q.buffer[i+1] <- val
            q.idxTail <- q.idxTail + 1       

c.
procedure dequeue (input/output q: queue, output val: ElType)
{Proses: menyimpan IDX_UNDEFa head q pada val dan menghapus head dari q}
{IS: q tidak kosong}
{FS: elemen pada HEAD dihapus, dan disimpan nilainya pada val}
KAMUS LOKAL
ALGORITMA
    val <- q.buffer[q.idxHead]
    if (q.idxHead = q.idxTail) then
        q.idxHead <- IDX_UNDEF
        q.idxTail <- IDX_UNDEF
    else
        q.idxHead <- q.idxHead + 1
