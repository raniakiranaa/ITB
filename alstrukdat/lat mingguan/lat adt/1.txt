Rania Sasi Kirana
18221168

LATIHAN SOAL 1

function isSimetris (l: List) → boolean
{ Menghasilkan true jika List l simetrik. }
{ List disebut simetrik jika:
- elemen pertama = elemen terakhir,
- elemen kedua = elemen sebelum terakhir,
- dan seterusnya.
List kosong adalah List simetris }

KAMUS LOKAL
    i,j: integer
    simetris: boolean

ALGORITMA
    { inisiasi variabel }
    i <- 0
    j <- length(l)-1
    simetris <- True
    
    { proses }
    if (isEmpty(l)) then { Jika List kosong }
        simetris <- True
    else { List tidak kosong }
        while (i<l.nEff and simetris) do
            if (getElmt(l,i) ≠ getElmt(l,j)) then
                simetris <- False
            
            i <- i+1
            j <- j-1
        
    -> simetris

function plusTab (l1,l2: List) → List
{ Prekondisi: l1 dan l2 berukuran sama dan tidak kosong. }
{ Mengirimkan l1+l2, yaitu penjumlahan setiap elemen l1 dan l2
pada indeks yang sama (seperti penjumlahan vektor dalam matematika).}

KAMUS LOKAL
    i: integer
    l3: List

ALGORITMA
    { inisiasi variabel }

    { Membuat list baru untuk output }
    CreateList(l3)
    l3.nEff <- length(l1)

    { proses }
    i traversal [0..l1.nEff-1]
        insertFirst(l3, getElmt(l1,i) + getElmt(l2,i))
    -> l3

function countOccurence(l: List, x: ElType) → integer
{ Menghasilkan berapa banyak kemunculan elemen bernilai x di List l. }
{ Jika l kosong, menghasilkan 0. }

KAMUS LOKAL
    i, count: integer

ALGORITMA
    { inisiasi variabel }
    count <- 0

    { proses }
    if isEmpty(l) then { jika list kosong }
        count <- 0
    else
        i traversal[0..l.nEff-1]
            if (getElmt(l,i) = x) then
                count <- count + 1
    
    -> count


function isEqual (l1,l2:List) → boolean
{ Mengirimkan true jika l1 setara dengan l2, yaitu jika ukuran
l1 sama dengan ukuran l2 dan semua elemen l1 dan l2 pada indeks
yang sama bernilai sama; L1 dan L2 tidak kosong. }

KAMUS LOKAL
    i: integer
    cek: boolean

ALGORITMA
    { inisiasi variabel }
    i <- 0
    cek <- True

    { proses }
    { ukuran l1 tidak sama dengan l2 }
    if (l1.nEff ≠ l2.nEff) then
        cek <- False
    else
        while (i<l1.nEff and cek) do
            if(getElmt(l1,i) ≠ getElmt(l2,i)) then
                cek <- False

    -> cek 


function indexOf (l:List, x:ElType) → IdxType
{ Mencari apakah ada elemen List l yang bernilai x. }
{ Jika ada, menghasilkan indeks i terkecil, di mana elemen l ke-i = x.
Jika tidak ada, mengirimkan indeks tak terdefinisi (idxUndef).
Jika list kosong, menghasilkan indeks tak terdefinisi (idxUndef). }
{ Memakai skema searching tanpa boolean. }

KAMUS LOKAL
    i: integer

ALGORITMA
    { proses }
    if isEmpty(l) then { Jika list kosong }
        -> idxUndef
    else { List tidak kosong }
        i traversal [0..l.nEff-1]
            if (getElmt(l,i)=x) then
                -> i

        -> idxUndef


procedure insertUnique (input/output l:List, input x:ElType)
{ Menambahkan x sebagai elemen terakhir list l,
pada list dengan elemen unik. }
{ I.S. List l boleh kosong, tetapi tidak penuh
dan semua elemennya bernilai unik, tidak terurut.
F.S. Menambahkan x sebagai elemen terakhir l
jika belum ada elemen yang bernilai x.
Jika sudah ada elemen list yang bernilai x
maka I.S. = F.S. dan dituliskan pesan
“nilai sudah ada”. }

{ Proses : Cek apakah X ada dengan sequential search
dengan sentinel, kemudian tambahkan jika belum ada. }

KAMUS LOKAL
    i: integer
    cek: boolean

ALGORITMA
    { inisiasi variabel }
    i <- 0
    cek <- False

    { proses }
    while (i<l.nEff and not cek) do
        if (getElmt(l,i) = x) then
            cek <- True
        i <- i+1
    
    if not cek then
        insertLast(l,x)
    else
        output("nilai sudah ada")
