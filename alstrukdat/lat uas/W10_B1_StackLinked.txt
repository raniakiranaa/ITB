/* File: stack_linked.h */
#ifndef STACK_LINKED_H
#define STACK_LINKED_H
#include "boolean.h"
#include <stdlib.h>
#define NIL NULL
/* Deklarasi infotype */
typedef int ElType;
/* Stack dengan representasi berkait dengan pointer */
typedef struct node* Address;
typedef struct node {
    ElType info;
    address next;
} Node;
/* Type stack dengan ciri Top: */
typedef struct {
    address addrTop; /* alamat Top: elemen puncak */
} Stack;

/* Selektor */
#define NEXT(p) (p)->next
#define INFO(p) (p)->info
#define ADDR_TOP(s) (s).addrTop
#define TOP(s) (s).addrTop->Info


/* Prototype manajemen memori */
Address newNode(ElType x){
/* Mengembalikan alamat sebuah Node hasil alokasi dengan info = x,
atau NIL jika alokasi gagal */
    Address p = (Address) malloc (sizeof(Node));
    if (p != NIL){
        INFO(p) = x;
        NEXT(p) = NIL;
    }
    return p;
}

/* ********* PROTOTYPE REPRESENTASI LOJIK STACK ***************/
boolean isEmpty(Stack s){
/* Mengirim true jika Stack kosong: TOP(s) = NIL */
    return (TOP(s) == NIL);
}

void CreateStack(Stack *s){
/* I.S. sembarang */
/* F.S. Membuat sebuah stack s yang kosong */
    TOP(*s) = NIL;
}

void push(Stack *s, ElType x){
/* Menambahkan x sebagai elemen Stack s */
/* I.S. s mungkin kosong, x terdefinisi */
/* F.S. x menjadi Top yang baru jika alokasi x berhasil, */
/* jika tidak, s tetap */
/* Pada dasarnya adalah operasi insertFirst pada list linier */
    Address p = newNode(x);
    if (!isEmpty(*s)){
        Next(p) = ADDR_TOP(*s);
    }
    ADDR_TOP(*s) = p;
}

void pop(Stack *s, ElType *x){
/* Menghapus Top dari Stack s */
/* I.S. s tidak kosong */
/* F.S. x adalah nilai elemen Top yang lama, */
/* elemen Top yang lama didealokasi */
/* Pada dasarnya adalah operasi deleteFirst pada list linier */
    Address p = ADDR_TOP(*s);
    *x = INFO(p);
    ADDR_TOP(*s) = NEXT(ADDR_TOP(*s));
    NEXT(p) = NIL;
    dealokasi(p);
}

#endif