function countPos(l: List) -> integer
{ Menghitung banyak kemunculan bil positif (>0) dari sebuah list of integer l }
KAMUS LOKAL
    p : Address
    count : integer
ALGORITMA
    p <- l
    count <- 0
    while (p != NIL) do
        if (p↑.info > 0) then
            count <- count + 1
        p <- p↑.next
    { p = NIL }
    -> count

function max (l: List) -> integer
{ Menghasilkan nilai maks dari suatu list of integer l yang tidak kosong }
KAMUS LOKAL
    p : Address
    max : integer
ALGORITMA
    p <- l
    max <- p↑.info
    while (p↑.next != NIL) do
        p <- p↑.next
        if (max < p↑.info) then
            max <- p↑.info
    { p↑.next = NIL }
    -> max

function searchPos (l: List) -> Address
{ Menghasilkan address di mana nilai positif pertama kali ditemukan di list of integer l }
KAMUS LOKAL
    p : Address
ALGORITMA
    p <- l
    while (p != NIL) do
        if (p↑.info > 0)
            -> p
        p <- p↑.next
    -> UNDEF

procedure deleteNeg (input/output l: List)
{ Menghapus semua elemen bernilai negatif (<0) pada sebuah list of integer l. List l boleh kosong 
dan setiap elemen yang dihapus harus dilakukan dealokasi. }
KAMUS LOKAL
    p, temp : Address
ALGORITMA
    p <- l
    temp <- NIL
    while (p != NIL) do
        if (p↑.info < 0) then
            if (temp = NIL) then
                l <- p↑.next
                dealokasi (p)
                p <- l
            else
                temp↑.next <- p↑.next
                dealokasi(p)
                p <- temp↑.next
        else
            temp <- p
            p <- p↑.next
    { p = NIL }

prosedur copyPos (input l1: List, output l2: List)
{ Menyalin semua elemen bernilai positif (>0) dari sebuah list of integer l1 menjadi l2 }
KAMUS LOKAL
ALGORITMA
    createList(l2)
    if (l1 != NIL) then
        p <- l1
        while (p != NIL) do
            if (p↑.info > 0) then
                insertLast(l2, p↑.info)
            p <- p↑.next
                

procedure sortedInsert(input/output l:List, input x:ElType)
{ Menambahkan sebuah elemen x pada sebuah list of integer l yang terurut menaik }
KAMUS LOKAL
    p, new : Address
ALGORITMA
    p <- First(l)
    if (p↑.info > x) then
        insertFirst(l, x)
    while (Next(p) != NIL and p↑.next↑.info < x) do
        p <- p↑.next
    if (Next(p) = NIL) then
        insertLast(l, x)
    else
        insertAt(l, p, x)

procedure updateList (input x,y : infotype, input/output l: List)
{ Menerima sebuah infotype x dan y dan sebuah list l dan kemudian 
mengganti elemen pertama l yang bernilai x dengan y jika x ada di l.
Jika x tidak ada di l, l tetap }
KAMUS LOKAL
    p : Address
ALGORITMA
    if (!isEmpty(l)) then
        p <- l↑.First
        while (p != NIL and p↑.info != x) do
            p <- p↑.next

        if (p↑.info = x) then { x ada di l }
            p↑.info <- y






    
